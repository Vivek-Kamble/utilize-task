{"version":3,"sources":["Owner.js","App.js","serviceWorker.js","index.js"],"names":["Owner","props","state","modalToggle","updateIndex","name","email","product","quantity","arr","orderData","newarr","handleClose","setState","handleShow","i","customer_name","customer_email","deleteOrder","splice","items","getdata","ReactDOM","render","document","getElementById","entries","index","value","push","key","Button","variant","onClick","className","CLIENT_ID","id","logout","handleLogoutFailure","this","Fragment","clientId","buttonText","onLogoutSuccess","onFailure","Table","striped","bordered","hover","Modal","show","Header","Title","type","aria-hidden","Body","Form","Group","Label","Control","defaultValue","Footer","React","Component","App","isLogined","accessToken","login","response","tokenObj","access_token","handleLoginFailure","alert","style","paddingTop","controlId","placeholder","textAlign","onSuccess","cookiePolicy","responseType","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.273a32fb.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM,{render} from 'react-dom'\nimport {Table,Button,Modal,Form} from 'react-bootstrap'\nimport './Owner.css'\nimport orderData from  './assets/DummyData.json'\nimport { GoogleLogout } from 'react-google-login';\nclass Owner extends React.Component{\n    constructor(props)\n    {\n        super()\n        this.CLIENT_ID= props.id\n        this.logout = props.logout\n        this.handleLogoutFailure=props.handleLogoutFailure\n        this.getdata();\n        \n    }\n    state = {\n        // show:false,\n        modalToggle:false,\n        updateIndex:1,\n        \n            name:'',\n            email:'',\n            product:'',\n            quantity:''\n        \n    }\n     arr = orderData\n     newarr = this.arr\n    //   [show, setShow] = useState(false);\n        // show=false;\n      handleClose = () => {\n    //   console.log(document.getElementById('ss').value)\n      this.setState({\n        //   show:false\n        modalToggle:false\n      });}\n      handleShow = (i)=>\n      {\n      this.setState({\n        //   show:true\n        modalToggle:true,\n        updateIndex:i,\n        \n            name:this.newarr[i].customer_name,\n            email:this.newarr[i].customer_email,\n            product:this.newarr[i].product,\n            quantity:this.newarr[i].quantity\n        \n      })\n    }\n     deleteOrder=(i)=>{\n        //  console.log(this.items[i])\n        // this.items.pop(i)\n        // this.forceUpdate()\n        // console.log(this.items[i]);    \n        this.newarr.splice(i,1)\n        // delete this.items[i]\n        this.items = []\n        this.getdata()\n        // this.getdata();\n        ReactDOM.render(this.items, document.getElementById('data'));\n    }\n    items = []\n    getdata= ()=>{\n        for (const [index, value] of this.newarr.entries()) {\n            this.items.push(<tr key={index}>\n                <td> {index+1} </td>\n                <td> {value.customer_name} </td>\n                <td> {value.customer_email} </td>\n                <td> {value.product} </td>\n                <td> {value.quantity} </td>\n                <td> <Button variant=\"primary\" onClick={()=>this.handleShow(index)}>Update</Button>\n                <Button variant=\"danger\" className=\"ml-5\" onClick={()=>this.deleteOrder(index)}>Delete</Button>\n                </td>\n                </tr>   )\n          }\n        //   console.log(this.items)\n    }\n    handlesubmit(){\n        // console.log(this.newarr[this.state.updateIndex].customer_name,event.target.value);\n        // console.log(this.state.name);\n        this.setState({         \n            name:document.getElementById('name').value,\n            email:document.getElementById('email').value,\n            product:document.getElementById('product').value,\n            quantity:document.getElementById('quantity').value\n        });\n        // this.newarr[this.state.updateIndex]=this.state.updateData\n        // this.getdata()\n        // this.handleClose();\n        // console.log(this.state);\n        \n        \n    }\n    \n    \n    render(){\n        return(\n            <React.Fragment>\n                <div>\n               <div className=\"nav\">\n                    <div className=\"logout\">\n                    <GoogleLogout\n                    clientId={ this.CLIENT_ID }\n                    buttonText='Logout'\n                    onLogoutSuccess={ this.logout }\n                    onFailure={ this.handleLogoutFailure }\n                    >\n                    </GoogleLogout>\n                    </div>\n                    \n               </div>\n               <div>\n                \n                <Table striped bordered hover>\n                <thead>\n                    <tr>\n                    <th>Sr.no.</th>\n                    <th>customer_name</th>\n                    <th>customer_email</th>\n                    <th>product</th>\n                    <th>quantity</th>\n                    <th>Operation</th>\n                    </tr>\n                </thead>\n                <tbody id=\"data\">\n                    { this.items }               \n                </tbody>\n                </Table>\n               </div>\n              \n            </div>\n            <Modal show={this.state.modalToggle}>\n            <Modal.Header>\n          <Modal.Title>Order Details</Modal.Title>\n          <button type=\"button\" className=\"close\" onClick={this.handleClose}><span aria-hidden=\"true\">Ã—</span><span className=\"sr-only\">Close</span></button>\n        </Modal.Header>\n        <Modal.Body>\n        <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" defaultValue={this.state.name} id=\"name\"/>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" defaultValue={this.state.email} id=\"email\"/>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Product</Form.Label>\n            <Form.Control type=\"text\" defaultValue={this.state.product} id=\"product\"/>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Quantity</Form.Label>\n            <Form.Control type=\"number\" defaultValue={this.state.quantity}  id=\"quantity\"/>\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={this.handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n            </Modal>\n                    \n            </React.Fragment>\n        )\n        \n    }\n}\n\nexport default Owner;","import React from 'react';\n// import ReactDOM from 'react-dom';\n// import GoogleLogin from 'react-google-login';\nimport './App.css';\nimport {Form,Button} from 'react-bootstrap'\nimport { GoogleLogin } from 'react-google-login';\nimport Owner from './Owner';\n\nconst CLIENT_ID = '93589983739-75aumkn58g6c3fdmerrnc32hf807q9it.apps.googleusercontent.com';\n\n\nclass App extends React.Component{\n  state = {\n    isLogined: false,\n    accessToken: ''\n  };\n\n  login=(response)=> {\n    // console.log(response.access_token);\n    \n    if(response.tokenObj.access_token){\n       this.setState(({\n        isLogined: true,\n        accessToken: response.tokenObj.access_token\n      }));\n    }\n  }\n\n   logout=(response)=> {\n     this.setState(({\n      isLogined: false,\n      accessToken: ''\n    }));\n  }\n\n  handleLoginFailure=(response)=> {\n    alert('Failed to log in')\n  }\n\n  handleLogoutFailure =()=> {\n    alert('Failed to log out')\n  }\n   \n  render(){\n    return(\n    this.state.isLogined ?\n        <Owner id={CLIENT_ID} logout={this.logout} handleLogoutFailure={this.handleLogoutFailure}></Owner>\n        :\n      <div className=\"col-md-4 offset-md-4 loginContainer\">\n      \n        <h5 style={{textAlign:\"center\"},{paddingTop:\"20px\"}}>Utilize app login</h5>\n                <Form>\n          <Form.Group controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control type=\"email\" placeholder=\"Enter email\" />\n          </Form.Group>\n\n          <Form.Group controlId=\"formBasicPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control type=\"password\" placeholder=\"Password\" />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Login\n          </Button>\n          <h5 style={{textAlign:\"center\"}}>OR</h5>\n        </Form>\n        <div>\n         <GoogleLogin\n          className=\"googleLogin\"\n          style={{textAlign:\"center\"}}\n          clientId={CLIENT_ID}\n          buttonText='Login'\n          onSuccess={ this.login }\n          onFailure={ this.handleLoginFailure }\n          cookiePolicy={ 'single_host_origin' }\n          responseType='code,token'\n        />\n      </div>  \n      \n      { this.state.accessToken ? <h5>Your Access Token: <br/><br/> { this.state.accessToken }</h5> : null }\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}